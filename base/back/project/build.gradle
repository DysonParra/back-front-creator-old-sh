buildscript {    // Configuration for building
    repositories {
        jcenter()    // Bintray's repository - a fast Maven Central mirror & more
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:2.2.0' // If a newer version is available, use it
    }
}

plugins {
    id 'org.springframework.boot' version '2.4.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

apply plugin: 'com.google.cloud.tools.appengine'  // App Engine tasks
apply plugin: "io.spring.dependency-management"

group = 'com.rtc'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
targetCompatibility = '11'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

bootRun {
    standardInput = System.in
}

bootJar {
   archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {   // repositories for Jar's you access in your code
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots' // SNAPSHOT repository (if needed)
    }
    mavenCentral()
    jcenter()
}

ext {
    //set('springCloudVersion', "2020.0.2")
    mapstructVersion = "1.3.0.Final"
    lombokVersion = "1.18.6"
}

compileJava {
    options.compilerArgs = [
        '-Amapstruct.defaultComponentModel=spring',
        '-Amapstruct.suppressGeneratorTimestamp=true',
        '-Amapstruct.suppressGeneratorVersionInfoComment=true' //,
        //           'lombok.launch.AnnotationProcessorHider$AnnotationProcessor'
    ]
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web-services', version:'2.2.1.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    ///*
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //implementation 'org.springframework.cloud:spring-cloud-starter-config'
    //implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    //implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    //implementation 'org.springframework.cloud:spring-cloud-starter-zipkin'
    implementation 'org.springframework.kafka:spring-kafka'

    implementation ("io.springfox:springfox-swagger2:2.9.2") {
        exclude module: "mapstruct"
    }
    implementation "io.springfox:springfox-bean-validators:2.9.2"
    implementation "io.springfox:springfox-swagger-ui:2.9.2"

    //https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-gcp-dependencies
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-gcp-dependencies', version: '1.2.7.RELEASE', ext: 'pom'
    //https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-gcp-starter-sql-mysql
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-sql-mysql', version: '1.2.7.RELEASE'

    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    // If you are using mapstruct in test code
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    compile 'com.google.appengine:appengine-api-1.0-sdk:+'  // Latest App Engine Api's

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    testCompile 'com.google.truth:truth:0.33'
    testCompile 'org.mockito:mockito-all:1.10.19'

    testCompile 'com.google.appengine:appengine-testing:+'
    testCompile 'com.google.appengine:appengine-api-stubs:+'
    testCompile 'com.google.appengine:appengine-tools-sdk:+'
    //*/
}

// Always run unit tests
appengineDeploy.dependsOn test
appengineStage.dependsOn test

appengine {  // App Engine tasks configuration
    deploy {   // deploy configuration
        projectId = 'servicio-back' //System.getenv('GCLOUD_CONFIG')
        version = '1'
    }
}

test {
    useJUnit()
    testLogging.showStandardStreams = true
    beforeTest { descriptor ->
        logger.lifecycle("test: " + descriptor + "  Running")
    }

    onOutput { descriptor, event ->
        logger.lifecycle("test: " + descriptor + ": " + event.message )
    }
    afterTest { descriptor, result ->
        logger.lifecycle("test: " + descriptor + ": " + result )
    }
}

/*dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}
*/
